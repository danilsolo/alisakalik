import { IConfig } from './types/alice';
import { WebhookResponse, WebhookRequest } from 'webhook';
import { EventInterface } from './types/eventEmitter';
export default class Alice {
    private anyCallback;
    private welcomeCallback;
    private timeoutCallback;
    private commands;
    private middlewares;
    private scenes;
    private currentScene;
    private sessions;
    private imagesApi;
    private server;
    private eventEmitter;
    private config;
    constructor(config?: IConfig);
    on(event: EventInterface['type'], callback: EventInterface['callback']): void;
    use(middleware: any): void;
    command(name: any, callback: any): void;
    welcome(callback: any): void;
    any(callback: any): void;
    handleRequestBody(req: any, sendResponse: any): Promise<true | void>;
    handleRequest(req: WebhookRequest, sendResponse?: (res: WebhookResponse) => void): Promise<any>;
    listen(webhookPath?: string, port?: number, callback?: () => void): Promise<{}>;
    registerScene(scene: any): void;
    uploadImage(imageUrl: string): Promise<any>;
    getImages(): Promise<any>;
    stopListening(): void;
    protected _handleEnterScene(sceneName: any): void;
    protected _handleLeaveScene(): void;
    private handleProxyRequest;
}
